//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Sam\Documents\Visual Studio 2017\Projects\gmcc\Engine\Parsers\Grammar\Grammar.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Engine.Parsers.Generated.Grammar {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class GrammarLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ADD=1, SUBTRACT=2, MULTIPLY=3, DIVIDE=4, MOD=5, POW=6, AND=7, DICE=8, 
		ADVANTAGE=9, DISADVANTAGE=10, INTEGER=11, L_PAREN=12, R_PAREN=13, WHITESPACE=14, 
		NEWLINE=15, COMMAND=16, ACTION=17;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"ADD", "SUBTRACT", "MULTIPLY", "DIVIDE", "MOD", "POW", "AND", "DICE", 
		"ADVANTAGE", "DISADVANTAGE", "INTEGER", "L_PAREN", "R_PAREN", "WHITESPACE", 
		"NEWLINE", "COMMAND", "ACTION"
	};


	public GrammarLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public GrammarLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'&'", "'d'", "'!'", "'~'", 
		null, "'('", "')'", null, null, "'command'", "'action'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ADD", "SUBTRACT", "MULTIPLY", "DIVIDE", "MOD", "POW", "AND", "DICE", 
		"ADVANTAGE", "DISADVANTAGE", "INTEGER", "L_PAREN", "R_PAREN", "WHITESPACE", 
		"NEWLINE", "COMMAND", "ACTION"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Grammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GrammarLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x13', '\x61', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x6', '\f', ';', '\n', '\f', 
		'\r', '\f', '\xE', '\f', '<', '\x3', '\r', '\x3', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xF', '\x6', '\xF', '\x44', '\n', '\xF', '\r', '\xF', 
		'\xE', '\xF', '\x45', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x5', 
		'\x10', 'K', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x6', '\x10', 
		'O', '\n', '\x10', '\r', '\x10', '\xE', '\x10', 'P', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x2', '\x2', '\x13', 
		'\x3', '\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', '\a', '\r', 
		'\b', '\xF', '\t', '\x11', '\n', '\x13', '\v', '\x15', '\f', '\x17', '\r', 
		'\x19', '\xE', '\x1B', '\xF', '\x1D', '\x10', '\x1F', '\x11', '!', '\x12', 
		'#', '\x13', '\x3', '\x2', '\x4', '\x3', '\x2', '\x32', ';', '\x4', '\x2', 
		'\v', '\v', '\"', '\"', '\x2', '\x65', '\x2', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x5', '\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x13', '\x3', '\x2', '\x2', '\x2', '\x2', '\x15', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x17', '\x3', '\x2', '\x2', '\x2', '\x2', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '!', '\x3', '\x2', '\x2', '\x2', '\x2', '#', '\x3', 
		'\x2', '\x2', '\x2', '\x3', '%', '\x3', '\x2', '\x2', '\x2', '\x5', '\'', 
		'\x3', '\x2', '\x2', '\x2', '\a', ')', '\x3', '\x2', '\x2', '\x2', '\t', 
		'+', '\x3', '\x2', '\x2', '\x2', '\v', '-', '\x3', '\x2', '\x2', '\x2', 
		'\r', '/', '\x3', '\x2', '\x2', '\x2', '\xF', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x11', '\x33', '\x3', '\x2', '\x2', '\x2', '\x13', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x15', '\x37', '\x3', '\x2', '\x2', '\x2', '\x17', 
		':', '\x3', '\x2', '\x2', '\x2', '\x19', '>', '\x3', '\x2', '\x2', '\x2', 
		'\x1B', '@', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x43', '\x3', '\x2', 
		'\x2', '\x2', '\x1F', 'N', '\x3', '\x2', '\x2', '\x2', '!', 'R', '\x3', 
		'\x2', '\x2', '\x2', '#', 'Z', '\x3', '\x2', '\x2', '\x2', '%', '&', '\a', 
		'-', '\x2', '\x2', '&', '\x4', '\x3', '\x2', '\x2', '\x2', '\'', '(', 
		'\a', '/', '\x2', '\x2', '(', '\x6', '\x3', '\x2', '\x2', '\x2', ')', 
		'*', '\a', ',', '\x2', '\x2', '*', '\b', '\x3', '\x2', '\x2', '\x2', '+', 
		',', '\a', '\x31', '\x2', '\x2', ',', '\n', '\x3', '\x2', '\x2', '\x2', 
		'-', '.', '\a', '\'', '\x2', '\x2', '.', '\f', '\x3', '\x2', '\x2', '\x2', 
		'/', '\x30', '\a', '`', '\x2', '\x2', '\x30', '\xE', '\x3', '\x2', '\x2', 
		'\x2', '\x31', '\x32', '\a', '(', '\x2', '\x2', '\x32', '\x10', '\x3', 
		'\x2', '\x2', '\x2', '\x33', '\x34', '\a', '\x66', '\x2', '\x2', '\x34', 
		'\x12', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\a', '#', '\x2', 
		'\x2', '\x36', '\x14', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\a', 
		'\x80', '\x2', '\x2', '\x38', '\x16', '\x3', '\x2', '\x2', '\x2', '\x39', 
		';', '\t', '\x2', '\x2', '\x2', ':', '\x39', '\x3', '\x2', '\x2', '\x2', 
		';', '<', '\x3', '\x2', '\x2', '\x2', '<', ':', '\x3', '\x2', '\x2', '\x2', 
		'<', '=', '\x3', '\x2', '\x2', '\x2', '=', '\x18', '\x3', '\x2', '\x2', 
		'\x2', '>', '?', '\a', '*', '\x2', '\x2', '?', '\x1A', '\x3', '\x2', '\x2', 
		'\x2', '@', '\x41', '\a', '+', '\x2', '\x2', '\x41', '\x1C', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x44', '\t', '\x3', '\x2', '\x2', '\x43', '\x42', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'\x45', '\x43', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\x3', '\x2', 
		'\x2', '\x2', '\x46', 'G', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\b', 
		'\xF', '\x2', '\x2', 'H', '\x1E', '\x3', '\x2', '\x2', '\x2', 'I', 'K', 
		'\a', '\xF', '\x2', '\x2', 'J', 'I', '\x3', '\x2', '\x2', '\x2', 'J', 
		'K', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\x3', '\x2', '\x2', '\x2', 
		'L', 'O', '\a', '\f', '\x2', '\x2', 'M', 'O', '\a', '\xF', '\x2', '\x2', 
		'N', 'J', '\x3', '\x2', '\x2', '\x2', 'N', 'M', '\x3', '\x2', '\x2', '\x2', 
		'O', 'P', '\x3', '\x2', '\x2', '\x2', 'P', 'N', '\x3', '\x2', '\x2', '\x2', 
		'P', 'Q', '\x3', '\x2', '\x2', '\x2', 'Q', ' ', '\x3', '\x2', '\x2', '\x2', 
		'R', 'S', '\a', '\x65', '\x2', '\x2', 'S', 'T', '\a', 'q', '\x2', '\x2', 
		'T', 'U', '\a', 'o', '\x2', '\x2', 'U', 'V', '\a', 'o', '\x2', '\x2', 
		'V', 'W', '\a', '\x63', '\x2', '\x2', 'W', 'X', '\a', 'p', '\x2', '\x2', 
		'X', 'Y', '\a', '\x66', '\x2', '\x2', 'Y', '\"', '\x3', '\x2', '\x2', 
		'\x2', 'Z', '[', '\a', '\x63', '\x2', '\x2', '[', '\\', '\a', '\x65', 
		'\x2', '\x2', '\\', ']', '\a', 'v', '\x2', '\x2', ']', '^', '\a', 'k', 
		'\x2', '\x2', '^', '_', '\a', 'q', '\x2', '\x2', '_', '`', '\a', 'p', 
		'\x2', '\x2', '`', '$', '\x3', '\x2', '\x2', '\x2', '\b', '\x2', '<', 
		'\x45', 'J', 'N', 'P', '\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Engine.Parsers.Generated.Grammar
